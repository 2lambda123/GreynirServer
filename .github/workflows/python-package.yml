# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Greynir

on:
  push:
    branches: 
      - '*'
  pull_request:
    branches: 
      - '*'

jobs:
  build:

    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DB_HOST: localhost
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.6]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Icelandic locale
      run: |
        sudo apt-get install language-pack-is
        sudo locale-gen is_IS.UTF-8
        sudo update-locale
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        pip install --upgrade git+https://github.com/mideind/Tokenizer#egg=tokenizer
        pip install --upgrade git+https://github.com/mideind/GreynirPackage#egg=reynir
        pip install --upgrade git+https://github.com/mideind/GreynirCorrect#egg=reynir-correct
        pip install -r requirements.txt
    - name: Populate database
      env:
        POSTGRES_HOST: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_PORT: 5432
        PGPASSWORD: postgres
      run: |
        sudo service postgresql restart
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -c "create database scraper with encoding 'UTF8' LC_COLLATE='is_IS.UTF-8' LC_CTYPE='is_IS.UTF-8' TEMPLATE=template0;"
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -d scraper -c "create extension if not exists \"uuid-ossp\";"
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -c "create user reynir with password 'reynir';"
        python scraper.py --init
        cp tests/test_files/testdb_articles.csv /tmp/
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -d scraper -c "copy articles from '/tmp/testdb_articles.csv' delimiter ',' csv;"
        cp tests/test_files/testdb_persons.csv /tmp/
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -d scraper -c "copy persons from '/tmp/testdb_persons.csv' delimiter ',' csv;"
        cp tests/test_files/testdb_queries.csv /tmp/
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -d scraper -c "copy queries from '/tmp/testdb_queries.csv' delimiter ',' csv;"
        cp tests/test_files/testdb_querydata.csv /tmp/
        export PGPASSWORD=postgres; sudo -u postgres psql -U postgres -d scraper -c "copy querydata from '/tmp/testdb_querydata.csv' delimiter ',' csv;"
    - name: Create dummy API key
      run: |
        cat "tests/test_files/dummy_greynir_api_key.txt" > "resources/GreynirServerKey.txt"
    - name: Test with pytest
      run: |
        python -m pytest
