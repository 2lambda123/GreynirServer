diff --git a/queries/iot_hue.py b/queries/iot_hue.py
index bd2909e8..19555335 100755
--- a/queries/iot_hue.py
+++ b/queries/iot_hue.py
@@ -403,16 +403,9 @@ def sentence(state: QueryStateDict, result: Result) -> None:
         print("COLOR NAME:", color_name)
         print(result.hue_obj)
         q.set_answer(
-            *gen_answer(
-                "ég var að kveikja ljósin! "
-                # + group_name
-                # + " "
-                # + color_name
-                # + " "
-                # + result.action
-                # + " "
-                # + str(result.hue_obj.get("hue", "enginn litur"))
-            )
+            {"answer": "Ég var að kveikja ljósin."},
+            "Ég var að kveikja ljósin.",
+            "Ég var að kveikja ljósin.",
         )
         js = (
             read_jsfile("IoT_Embla/fuse.js")
@@ -421,7 +414,7 @@ def sentence(state: QueryStateDict, result: Result) -> None:
             + read_jsfile("IoT_Embla/Philips_Hue/lights.js")
             + read_jsfile("IoT_Embla/Philips_Hue/set_lights.js")
         )
-        js += f"setLights('{light_or_group_name}', '{json.dumps(result.hue_obj)}');"
+        js += f"return setLights('{light_or_group_name}', '{json.dumps(result.hue_obj)}');"
         q.set_command(js)
     except Exception as e:
         logging.warning("Exception while processing random query: {0}".format(e))
diff --git a/queries/iot_spotify.py b/queries/iot_spotify.py
index 34a8ffaf..eaf3fd8a 100644
--- a/queries/iot_spotify.py
+++ b/queries/iot_spotify.py
@@ -51,6 +51,8 @@ _SPOTIFY_REGEXES = [
     # r"^spilaðu ([\w|\s]+) með ([\w|\s]+) á spotify?$",
     r"^spilaðu ([\w|\s]+) á spotify$",
     r"^spilaðu ([\w|\s]+) á spotify",
+    r"^spilaðu plötuna ([\w|\s]+)$",
+    r"^spilaðu plötuna ([\w|\s]+)$ með ([\w|\s]+)$ á spotify$",
 ]
 
 
@@ -74,7 +76,10 @@ def handle_plain_text(q) -> bool:
             artist_name = m.group(2).strip()
             print("SONG NAME :", song_name)
             print("ARTIST NAME :", artist_name)
-            device_data = q.client_data("iot").get("iot_streaming").get("spotify")
+            try:
+                device_data = q.client_data("iot").get("iot_streaming").get("spotify")
+            except AttributeError:
+                device_data = None
             if device_data is not None:
                 client_id = str(q.client_id)
                 spotify_client = SpotifyClient(
@@ -83,7 +88,13 @@ def handle_plain_text(q) -> bool:
                     song_name=song_name,
                     artist_name=artist_name,
                 )
-                song_url = spotify_client.get_song_by_artist()
+                if "plötuna" in ql:
+                    type = "album"
+                elif "lagalistann" in ql:
+                    type = "playlist"
+                else:
+                    type = "song"
+                song_url = spotify_client.get_song_by_artist(type=type)
                 response = spotify_client.play_song_on_device()
                 # response = None
                 print("RESPONSE FROM SPOTIFY:", response)
diff --git a/queries/js/IoT_Embla/Philips_Hue/set_lights.js b/queries/js/IoT_Embla/Philips_Hue/set_lights.js
index 257940b5..08bd1b03 100644
--- a/queries/js/IoT_Embla/Philips_Hue/set_lights.js
+++ b/queries/js/IoT_Embla/Philips_Hue/set_lights.js
@@ -62,6 +62,7 @@ function setLights(target, state) {
             });
         }
     });
+    return "Ég var að kveikja ljósin.";
 }
 //         fetch(`http://${BRIDGE_IP}/api/${USERNAME}/${url}`, {
 //             method: "PUT",
diff --git a/queries/spotify.py b/queries/spotify.py
index fef24c7f..25093339 100644
--- a/queries/spotify.py
+++ b/queries/spotify.py
@@ -147,16 +147,14 @@ class SpotifyClient:
         )
         return cred_dict
 
-    def get_song_by_artist(self):
+    def get_song_by_artist(self, type):
         print("get song by artist")
         print("accesss token get song; ", self._access_token)
         song_name = self._song_name.replace(" ", "%20")
         artist_name = self._artist_name.replace(" ", "%20")
         print("song name: ", song_name)
         print("artist name: ", artist_name)
-        url = (
-            f"https://api.spotify.com/v1/search?type=track&q={song_name}+{artist_name}"
-        )
+        url = f"https://api.spotify.com/v1/search?type=track,album&q={song_name}+{artist_name}"
         print("url: ", url)
 
         payload = ""
@@ -164,12 +162,15 @@ class SpotifyClient:
             "Content-Type": "application/json",
             "Authorization": f"Bearer {self._access_token}",
         }
-
+        if type == "song":
+            type = "tracks"
+        elif type == "album":
+            type = "albums"
         response = query_json_api(url, headers)
         # print(response)
         try:
-            self._song_url = response["tracks"]["items"][0]["external_urls"]["spotify"]
-            self._song_uri = response["tracks"]["items"][0]["uri"]
+            self._song_url = response[type]["items"][0]["external_urls"]["spotify"]
+            self._song_uri = response[type]["items"][0]["uri"]
         except IndexError:
             print("No song found.")
             return
